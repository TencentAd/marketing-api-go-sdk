/*
 * Marketing API
 *
 * Marketing API
 *
 * API version: 3.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package api

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
	"github.com/tencentad/marketing-api-go-sdk/pkg/errors"
	"github.com/tencentad/marketing-api-go-sdk/pkg/model"
	. "github.com/tencentad/marketing-api-go-sdk/pkg/model/v3"
)

// Linger please
var (
	_ context.Context
)

type CreativeTemplateListApiService service

/*
CreativeTemplateListApiService 获取创意形式列表
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountId
 * @param optional nil or *CreativeTemplateListGetOpts - Optional Parameters:
     * @param "MarketingGoal" (optional.String) -
     * @param "MarketingSubGoal" (optional.String) -
     * @param "MarketingTargetType" (optional.String) -
     * @param "MarketingCarrierType" (optional.String) -
     * @param "SiteSet" (optional.String) -
     * @param "DynamicAbilityType" (optional.String) -
     * @param "WechatSceneSpecPosition" (optional.Interface of []int64) -
     * @param "CreativeTemplateId" (optional.Int64) -
     * @param "Page" (optional.Int64) -
     * @param "PageSize" (optional.Int64) -
     * @param "DynamicAdType" (optional.String) -
     * @param "DynamicCreativeType" (optional.String) -
     * @param "SupportSiteSet" (optional.Interface of []string) -
     * @param "BidMode" (optional.String) -
     * @param "WechatChannelsScene" (optional.Interface of []int64) -
     * @param "DisplayScene" (optional.Interface of []string) -
     * @param "PcScene" (optional.Interface of []string) -
     * @param "AdgroupId" (optional.Int64) -
     * @param "AdgroupType" (optional.String) -
     * @param "Fields" (optional.Interface of []string) -  返回参数的字段列表

@return CreativeTemplateListGetResponse
*/

type CreativeTemplateListGetOpts struct {
	MarketingGoal           optional.String
	MarketingSubGoal        optional.String
	MarketingTargetType     optional.String
	MarketingCarrierType    optional.String
	SiteSet                 optional.String
	DynamicAbilityType      optional.String
	WechatSceneSpecPosition optional.Interface
	CreativeTemplateId      optional.Int64
	Page                    optional.Int64
	PageSize                optional.Int64
	DynamicAdType           optional.String
	DynamicCreativeType     optional.String
	SupportSiteSet          optional.Interface
	BidMode                 optional.String
	WechatChannelsScene     optional.Interface
	DisplayScene            optional.Interface
	PcScene                 optional.Interface
	AdgroupId               optional.Int64
	AdgroupType             optional.String
	Fields                  optional.Interface
}

func (a *CreativeTemplateListApiService) Get(ctx context.Context, accountId int64, localVarOptionals *CreativeTemplateListGetOpts) (CreativeTemplateListGetResponseData, http.Header, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarFileKey     string
		localVarReturnValue CreativeTemplateListGetResponseData
		localVarResponse    CreativeTemplateListGetResponse
	)

	// create path and map variables
	localVarPath := a.client.Cfg.BasePath + "/creative_template_list/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("account_id", parameterToString(accountId, ""))
	if localVarOptionals != nil && localVarOptionals.MarketingGoal.IsSet() {
		localVarQueryParams.Add("marketing_goal", parameterToString(localVarOptionals.MarketingGoal.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MarketingSubGoal.IsSet() {
		localVarQueryParams.Add("marketing_sub_goal", parameterToString(localVarOptionals.MarketingSubGoal.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MarketingTargetType.IsSet() {
		localVarQueryParams.Add("marketing_target_type", parameterToString(localVarOptionals.MarketingTargetType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MarketingCarrierType.IsSet() {
		localVarQueryParams.Add("marketing_carrier_type", parameterToString(localVarOptionals.MarketingCarrierType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SiteSet.IsSet() {
		localVarQueryParams.Add("site_set", parameterToString(localVarOptionals.SiteSet.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DynamicAbilityType.IsSet() {
		localVarQueryParams.Add("dynamic_ability_type", parameterToString(localVarOptionals.DynamicAbilityType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WechatSceneSpecPosition.IsSet() {
		localVarQueryParams.Add("wechat_scene_spec_position", parameterToString(localVarOptionals.WechatSceneSpecPosition.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.CreativeTemplateId.IsSet() {
		localVarQueryParams.Add("creative_template_id", parameterToString(localVarOptionals.CreativeTemplateId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("page_size", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DynamicAdType.IsSet() {
		localVarQueryParams.Add("dynamic_ad_type", parameterToString(localVarOptionals.DynamicAdType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DynamicCreativeType.IsSet() {
		localVarQueryParams.Add("dynamic_creative_type", parameterToString(localVarOptionals.DynamicCreativeType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SupportSiteSet.IsSet() {
		localVarQueryParams.Add("support_site_set", parameterToString(localVarOptionals.SupportSiteSet.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.BidMode.IsSet() {
		localVarQueryParams.Add("bid_mode", parameterToString(localVarOptionals.BidMode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WechatChannelsScene.IsSet() {
		localVarQueryParams.Add("wechat_channels_scene", parameterToString(localVarOptionals.WechatChannelsScene.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.DisplayScene.IsSet() {
		localVarQueryParams.Add("display_scene", parameterToString(localVarOptionals.DisplayScene.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.PcScene.IsSet() {
		localVarQueryParams.Add("pc_scene", parameterToString(localVarOptionals.PcScene.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.AdgroupId.IsSet() {
		localVarQueryParams.Add("adgroup_id", parameterToString(localVarOptionals.AdgroupId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AdgroupType.IsSet() {
		localVarQueryParams.Add("adgroup_type", parameterToString(localVarOptionals.AdgroupType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Fields.IsSet() {
		localVarQueryParams.Add("fields", parameterToString(localVarOptionals.Fields.Value(), "multi"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"text/plain"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes, localVarFileKey)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	defer localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, nil, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarResponse, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			if *localVarResponse.Code != 0 {
				var localVarResponseErrors []model.ApiErrorStruct
				if localVarResponse.Errors != nil {
					localVarResponseErrors = *localVarResponse.Errors
				}
				err = errors.NewError(localVarResponse.Code, localVarResponse.Message, localVarResponse.MessageCn, localVarResponseErrors)
				return localVarReturnValue, localVarHttpResponse.Header, err
			}
			if localVarResponse.Data == nil {
				return localVarReturnValue, localVarHttpResponse.Header, err
			} else {
				return *localVarResponse.Data, localVarHttpResponse.Header, err
			}
		} else {
			return localVarReturnValue, localVarHttpResponse.Header, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v CreativeTemplateListGetResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse.Header, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse.Header, newErr
		}

		return localVarReturnValue, localVarHttpResponse.Header, newErr
	}

	return localVarReturnValue, localVarHttpResponse.Header, nil
}
